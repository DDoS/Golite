package golite.semantic.symbol;

import golite.semantic.type.Type;
import golite.util.SourcePositioned;

/**
 * The symbol generated by a variable declaration.
 */
public class Variable extends Symbol {
    private final Variable aliasedOriginal;
    private final Type type;

    public Variable(SourcePositioned source, String name, Type type) {
        this(source.getStartLine(), source.getEndLine(), source.getStartPos(), source.getEndPos(), name, type);
    }

    public Variable(int startLine, int endLine, int startPos, int endPos, String name, Type type) {
        this(null, startLine, endLine, startPos, endPos, name, type);
    }

    private Variable(Variable aliasedOriginal, int startLine, int endLine, int startPos, int endPos, String name, Type type) {
        super(startLine, endLine, startPos, endPos, name);
        this.aliasedOriginal = aliasedOriginal;
        this.type = type;
    }

    @Override
    public Type getType() {
        return type;
    }

    public Variable dealias() {
        if (aliasedOriginal != null) {
            return this;
        }
        final Type resolvedType = type.deepResolve();
        return new Variable(this, getStartLine(), getEndLine(), getStartPos(), getEndPos(), name, resolvedType);
    }

    @Override
    public String toString() {
        return String.format("var %s %s", name, type);
    }

    @Override
    public boolean equals(Object object) {
        if (!(object instanceof Variable)) {
            return false;
        }
        final Variable that = (Variable) object;
        final Variable a = this.aliasedOriginal != null ? this.aliasedOriginal : this;
        final Variable b = that.aliasedOriginal != null ? that.aliasedOriginal : that;
        return a == b;
    }

    @Override
    public int hashCode() {
        return aliasedOriginal != null ? aliasedOriginal.hashCode() : super.hashCode();
    }
}
