package golite.semantic.symbol;

import golite.semantic.type.FunctionType;
import golite.util.SourcePositioned;

/**
 * The symbol generated by a function declaration.
 */
public class Function extends Symbol {
    private final FunctionType type;
    private Function dealiased = null;

    public Function(String name, FunctionType type) {
        super(name);
        this.type = type;
    }

    public Function(SourcePositioned source, String name, FunctionType type) {
        this(source.getStartLine(), source.getEndLine(), source.getStartPos(), source.getEndPos(), name, type);
    }

    public Function(int startLine, int endLine, int startPos, int endPos, String name, FunctionType type) {
        super(startLine, endLine, startPos, endPos, name);
        this.type = type;
    }

    @Override
    public FunctionType getType() {
        return type;
    }

    public Function dealias() {
        if (dealiased != null) {
            return dealiased;
        }
        final FunctionType resolvedType = type.deepResolve();
        if (type != resolvedType) {
            dealiased = new Function(getStartLine(), getEndLine(), getStartPos(), getEndPos(), name, resolvedType);
        } else {
            dealiased = this;
        }
        return dealiased;
    }

    @Override
    public String toString() {
        return "func " + name + type.signature();
    }
}
