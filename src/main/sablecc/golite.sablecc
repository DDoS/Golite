Package golite;

Helpers

    // CHARACTERS
    // Some Symbols
    underscore = '_';
    slash = '/';
    backslash = '\';
    star = '*';
    dot = '.';
    sp = ' ';

    // Universal Character Set
    ch_set = [0 .. 0xFFFF];

    tab = 9;
    newln = 10;
    carriage = 13;
    endln = carriage newln | carriage | newln;

    // NOTs
    not_endln = [ch_set - [carriage + newln]];
    not_star = [ch_set - star];
    not_slash = [ch_set - slash];
    not_star_not_slash = [ch_set - [star + slash]];

    // Alphabets
    alpha_lower = ['a' .. 'z'];
    alpha_upper = ['A' .. 'Z'];
    alpha = alpha_lower | alpha_upper;

    // Numeric Characters
    num_ch = ['0' .. '9'];
    oct_num_ch = ['0' .. '7'];

    zero = '0';
    nozero = [num_ch - '0'];

    hex_num_ch = num_ch | alpha;
    single_quot = ''';
    double_quot = '"';
    back_q = '`';

    // Escape Sequence
    escapes = '\\' | '\a' | '\b' | '\f' | '\n' | '\r' | '\t' | '\v';

    // Exclusions
    no_carr_nl = [ch_set - [carriage + newln]] ;
    no_carr_nl_bsl = [no_carr_nl - backslash];
    no_carr_nl_sl_dlq = [no_carr_nl_bsl - double_quot];
    no_back_q = [ch_set - back_q];

    letter = alpha | underscore;
    alpha_num = letter | num_ch ;
    comment_singleln = '//' not_endln* endln;
    comment_multiln = '/*' not_star* '*'+ (not_star_not_slash not_star* '*'+)* '/';

    string_ch = no_carr_nl_sl_dlq | backslash double_quot | escapes;
    string_ch_sequence = string_ch+;

Tokens

    star = star;
    slash = slash;

    // WHITESPACE
    space = (sp | tab)+;
    endln = endln;

    // KEYWORDS
    // Go keywords
    kw_break = 'break';
    kw_case = 'case';
    kw_chan = 'chan';
    kw_const = 'const';
    kw_continue = 'continue';
    kw_default = 'default';
    kw_defer = 'defer';
    kw_else = 'else';
    kw_fallthrough = 'fallthrough';
    kw_for = 'for';
    kw_func = 'func';
    kw_go = 'go';
    kw_goto = 'goto';
    kw_if = 'if';
    kw_import = 'import';
    kw_interface = 'interface';
    kw_map = 'map';
    kw_package = 'package';
    kw_range = 'range';
    kw_return = 'return';
    kw_select = 'select';
    kw_struct = 'struct';
    kw_switch = 'switch';
    kw_type = 'type';
    kw_var = 'var';

    // Golite additional keywords
    print = 'print';
    println = 'println';
    append = 'append';

    // Operators
    plus = '+';
    minus = '-';
    mod = '%';
    ampr = '&';
    pipe = '|';
    crt = '^';
    lshift = '<<';
    rshift = '>>';
    ampr_crt = '&^';
    plus_eql = '+=';
    minus_eql = '-=';
    star_eql = '*=';
    slash_eql = '/=';
    mod_eql = '%=';
    ampr_eql = '&=';
    pipe_eql = '|=';
    crt_eql = '^=';
    lshift_eql = '<<=';
    rshift_eql = '>>=';
    ampr_crt_eql = '&^=';
    dbl_ampr = '&&';
    dbl_pipe = '||';
    inp = '<-';
    dbl_plus = '++';
    dbl_minus = '--';
    dbl_eql = '==';
    less_than = '<';
    greatr_than = '>';
    eql = '=';
    not = '!';
    not_eql = '!=';
    less_than_eql = '<=';
    greatr_than_eql = '>=';
    col_eql = ':=';
    ellipsis = '...';

    // Delimiters
    lf_paren = '(';
    lf_sq_paren = '[';
    lf_brace = '{';
    rht_paren = ')';
    rht_sq_paren = ']';
    rht_brace = '}';

    comma = ',';
    dot = dot;

    semi = ';';
    coln = ':';

    // COMMENTS
    comment = comment_singleln | comment_multiln;

    // IDENTIFIERS
    idenf = letter alpha_num*;

    // LITERALS
    // Int
    int_lit = zero | num_ch num_ch*;
    oct_lit = zero oct_num_ch+;
    hex_lit = zero ['x' + 'X'] hex_num_ch+;

    // Float
    float_lit = num_ch+ dot num_ch* | dot num_ch num_ch*;

    // String
    // "hello\n" // Interpreted string, \n is transformed into newline
    interpreted_string_lit = double_quot string_ch_sequence? double_quot;

    // `hello\n` // Raw string, \n appears as a `\` followed by `n`
    raw_string_lit = back_q no_back_q* back_q;

    // Rune
    rune_lit = single_quot (no_carr_nl_bsl | escapes |  backslash single_quot) single_quot;

Ignored Tokens
    comment, space, endln;

Productions

    // PROGRAM
    prog {-> prog} = pkg semi decl_semi* {-> New prog(pkg.pkg, [decl_semi.decl])};

    decl_semi {-> decl*} = decl semi {-> [decl.decl]};

    // Package declaration
    pkg {-> pkg} = kw_package idenf {-> New pkg(idenf)};

    // DECLARATIONS
    decl {-> decl*} = {var} decl_var
                    {-> [decl_var.decl]}
            | {type} decl_type
                    {-> [decl_type.decl]}
            | {func} decl_func
                    {-> [decl_func.decl]};

    // Variable declarations
    decl_var {-> decl*} = {single} kw_var spec_var
                    {-> [spec_var.decl]}
            | {distributed} kw_var lf_paren spec_var_semi* rht_paren
                    {-> [spec_var_semi.decl]};

    spec_var_semi {-> decl} = spec_var semi {-> spec_var.decl};
    spec_var {-> decl} = {type} idenf_list type
                    {-> New decl.var(type, [idenf_list.idenf], [])}
            | {expr} idenf_list eql exprs_list
                    {-> New decl.var(Null, [idenf_list.idenf], [exprs_list.expr])}
            | {type_and_expr} idenf_list type eql exprs_list
                    {-> New decl.var(type, [idenf_list.idenf], [exprs_list.expr])};

    // Type declarations
    decl_type {-> decl*} = {single} kw_type spec_type
                    {-> [spec_type.decl]}
            | {distributed} kw_type lf_paren spec_type_semi* rht_paren
                    {-> [spec_type_semi.decl]};

    // A field in a type declaration, ending in a semicolon
    spec_type_semi {-> decl} = spec_type semi {-> spec_type.decl};
    spec_type {-> decl} = idenf type {-> New decl.type(type, idenf)};

    // Function declarations
    decl_func {-> decl} = {return} kw_func idenf lf_paren param_list rht_paren type block
                    {-> New decl.func(type, idenf, [param_list.param], [block.stmt])}
            | {no_return} kw_func idenf lf_paren param_list rht_paren block
                    {-> New decl.func(Null, idenf, [param_list.param], [block.stmt])};

    param_list {-> param*} = {empty}
                    {-> []}
            | {multiple} param_list_element* param_spec
                    {-> [param_list_element.param, param_spec.param]};

    param_list_element {-> param} = param_spec comma {-> param_spec.param};
    param_spec {-> param} = idenf_list type {-> New param(type, [idenf_list.idenf])};

    block {-> stmt*} = lf_brace stmt_semi* rht_brace {-> [stmt_semi.stmt]};
    stmt_semi {-> stmt} = stmt semi {-> stmt.stmt};

    // A list of identifiers
    idenf_list {-> idenf*} = {single} idenf
                    {-> [idenf]}
            | {multiple} idenf comma idenf_list
                    {-> [idenf, idenf_list.idenf]};

    // STATEMENTS
    stmt {-> stmt} = {simple} simple_stmt
                    {-> simple_stmt.stmt}
            | {print} print lf_paren exprs_list rht_paren
                    {-> New stmt.print([exprs_list.expr])}
            | {println} println lf_paren exprs_list rht_paren
                    {-> New stmt.println([exprs_list.expr])}
            | {return} kw_return
                    {-> New stmt.return(Null)}
            | {return_exp} kw_return expr
                    {-> New stmt.return(expr.expr)}
            | {break} kw_break
                    {-> New stmt.break()}
            | {continue} kw_continue
                    {-> New stmt.continue()}
            | {if} if_chain else_block?
                    {-> New stmt.if([if_chain.if_block], [else_block.stmt])}
            | {switch} kw_switch simple_stmt_semi? expr? lf_brace case* rht_brace
                    {-> New stmt.switch(simple_stmt_semi.stmt, expr.expr, [case.case])}
            | {for} kw_for for_condition block
                    {-> New stmt.for(for_condition.for_condition, [block.stmt])}
            | {var} decl_var
                    {-> New stmt.decl([decl_var.decl])}
            | {type} decl_type
                    {-> New stmt.decl([decl_type.decl])};

    simple_stmt_semi {-> stmt} = simple_stmt semi {-> simple_stmt.stmt};

    if_block {-> if_block} = kw_if simple_stmt_semi? expr block {-> New if_block(simple_stmt_semi.stmt, expr.expr, [block.stmt])};
    else_block {-> stmt*} = kw_else block {-> [block.stmt]};

    if_chain {-> if_block*} = {single} if_block
                    {-> [if_block.if_block]}
            | {multiple} if_chain kw_else if_block
                    {-> [if_chain.if_block, if_block.if_block]};

    case {-> case} = {expr} kw_case exprs_list coln stmt_semi*
                    {-> New case.expr([exprs_list.expr], [stmt_semi.stmt])}
            | {default} kw_default coln stmt_semi*
                    {-> New case.default([stmt_semi.stmt])};

    for_condition {-> for_condition} = {empty}
                    {-> New for_condition.empty()}
            | {expr} expr
                    {-> New for_condition.expr(expr.expr)}
            | {clause} [init]:simple_stmt [l]:semi [cond]:expr? [r]:semi [post]:simple_stmt
                    {-> New for_condition.clause(init.stmt, cond.expr, post.stmt)};

    simple_stmt {-> stmt} = {empty}
                    {-> New stmt.empty()}
            | {expr} expr
                    {-> New stmt.expr(expr.expr)}
            | {incr} expr dbl_plus
                    {-> New stmt.incr(expr.expr)}
            | {decr} expr dbl_minus
                    {-> New stmt.decr(expr.expr)}
            | {decl_var_short} [left]:exprs_list col_eql [right]:exprs_list
                    {-> New stmt.decl_var_short([left.expr], [right.expr])}
            | {assign} [left]:exprs_list eql [right]:exprs_list
                    {-> New stmt.assign([left.expr], [right.expr])}
            | {assign_mul} [left]:expr star_eql [right]:expr
                    {-> New stmt.assign_mul(left, right)}
            | {assign_div} [left]:expr slash_eql [right]:expr
                    {-> New stmt.assign_div(left, right)}
            | {assign_rem} [left]:expr mod_eql [right]:expr
                    {-> New stmt.assign_rem(left, right)}
            | {assign_lshift} [left]:expr lshift_eql [right]:expr
                    {-> New stmt.assign_lshift(left, right)}
            | {assign_rshift} [left]:expr rshift_eql [right]:expr
                    {-> New stmt.assign_rshift(left, right)}
            | {assign_bit_and} [left]:expr ampr_eql [right]:expr
                    {-> New stmt.assign_bit_and(left, right)}
            | {assign_bit_and_not} [left]:expr ampr_crt_eql [right]:expr
                    {-> New stmt.assign_bit_and_not(left, right)}
            | {assign_add} [left]:expr plus_eql [right]:expr
                    {-> New stmt.assign_add(left, right)}
            | {assign_sub} [left]:expr minus_eql [right]:expr
                    {-> New stmt.assign_sub(left, right)}
            | {assign_bit_or} [left]:expr pipe_eql [right]:expr
                    {-> New stmt.assign_bit_or(left, right)}
            | {assign_bit_xor} [left]:expr crt_eql [right]:expr
                    {-> New stmt.assign_bit_xor(left, right)};

    // EXPRESSIONS
    expr {-> expr} = expr_binary_one {-> expr_binary_one.expr};

    expr_int {-> expr} = {int_dec} int_lit
                    {-> New expr.int_dec(int_lit)}
            | {int_octal} oct_lit
                    {-> New expr.int_oct(oct_lit)}
            | {int_hex} hex_lit
                    {-> New expr.int_hex(hex_lit)};

    expr_string {-> expr} = {string_intr} interpreted_string_lit
                    {-> New expr.string_intr(interpreted_string_lit)}
            | {string_raw} raw_string_lit
                    {-> New expr.string_raw(raw_string_lit)};

    expr_atom {-> expr} = {ident} idenf
                    {-> New expr.ident(idenf)}
            | {int} expr_int
                    {-> expr_int.expr}
            | {float} float_lit
                    {-> New expr.float(float_lit)}
            | {rune} rune_lit
                    {-> New expr.rune(rune_lit)}
            | {string} expr_string
                    {-> expr_string.expr}
            | {enclosed} lf_paren expr rht_paren
                    {-> expr.expr};

    // Arguments are comma separated
    exprs_list {-> expr*} = {single} expr
                    {-> [expr.expr]}
            | {multiple} expr comma exprs_list
                    {-> [expr.expr, exprs_list.expr]};
    // An argument list is between () and can be empty
    args_list {-> expr*} = lf_paren exprs_list? rht_paren
                    {-> [exprs_list.expr]};

    expr_primary {-> expr} = {atom} expr_atom
                    {-> expr_atom.expr}
            | {select} expr_primary dot idenf
                    {-> New expr.select(expr_primary.expr, idenf)}
            | {index} expr_primary lf_sq_paren expr rht_sq_paren
                    {-> New expr.index(expr_primary.expr, expr.expr)}
            | {call} expr_primary args_list
                    {-> New expr.call(expr_primary.expr, [args_list.expr])}
            | {append} append lf_paren [arg1]:expr comma [arg2]:expr rht_paren
                    {-> New expr.append(arg1.expr, arg2.expr)};

    expr_unary {-> expr} = {primary} expr_primary
                    {-> expr_primary.expr}
            | {logic_not} not expr_unary
                    {-> New expr.logic_not(expr_unary.expr)}
            | {reaffirm} plus expr_unary
                    {-> New expr.reaffirm(expr_unary.expr)}
            | {negate} minus expr_unary
                    {-> New expr.negate(expr_unary.expr)}
            | {bit_not} crt expr_unary
                    {-> New expr.bit_not(expr_unary.expr)};

    expr_binary_five {-> expr} = {unary} expr_unary
                    {-> expr_unary.expr}
            | {mul} expr_binary_five star expr_unary
                    {-> New expr.mul(expr_binary_five.expr, expr_unary.expr)}
            | {div} expr_binary_five slash expr_unary
                    {-> New expr.div(expr_binary_five.expr, expr_unary.expr)}
            | {rem} expr_binary_five mod expr_unary
                    {-> New expr.rem(expr_binary_five.expr, expr_unary.expr)}
            | {lshift} expr_binary_five lshift expr_unary
                    {-> New expr.lshift(expr_binary_five.expr, expr_unary.expr)}
            | {rshift} expr_binary_five rshift expr_unary
                    {-> New expr.rshift(expr_binary_five.expr, expr_unary.expr)}
            | {bit_and} expr_binary_five ampr expr_unary
                    {-> New expr.bit_and(expr_binary_five.expr, expr_unary.expr)}
            | {bit_and_not} expr_binary_five ampr_crt expr_unary
                    {-> New expr.bit_and_not(expr_binary_five.expr, expr_unary.expr)};

    expr_binary_four {-> expr} = {binary_five} expr_binary_five
                    {-> expr_binary_five.expr}
            | {add} expr_binary_four plus expr_binary_five
                    {-> New expr.add(expr_binary_four.expr, expr_binary_five.expr)}
            | {sub} expr_binary_four minus expr_binary_five
                    {-> New expr.sub(expr_binary_four.expr, expr_binary_five.expr)}
            | {bit_or} expr_binary_four pipe expr_binary_five
                    {-> New expr.bit_or(expr_binary_four.expr, expr_binary_five.expr)}
            | {bit_xor} expr_binary_four crt expr_binary_five
                    {-> New expr.bit_xor(expr_binary_four.expr, expr_binary_five.expr)};

    expr_binary_three {-> expr} = {binary_four} expr_binary_four
                    {-> expr_binary_four.expr}
            | {eq} expr_binary_three dbl_eql expr_binary_four
                    {-> New expr.eq(expr_binary_three.expr, expr_binary_four.expr)}
            | {neq} expr_binary_three not_eql expr_binary_four
                    {-> New expr.neq(expr_binary_three.expr, expr_binary_four.expr)}
            | {less} expr_binary_three less_than expr_binary_four
                    {-> New expr.less(expr_binary_three.expr, expr_binary_four.expr)}
            | {less_eq} expr_binary_three less_than_eql expr_binary_four
                    {-> New expr.less_eq(expr_binary_three.expr, expr_binary_four.expr)}
            | {great} expr_binary_three greatr_than expr_binary_four
                    {-> New expr.great(expr_binary_three.expr, expr_binary_four.expr)}
            | {great_eq} expr_binary_three greatr_than_eql expr_binary_four
                    {-> New expr.great_eq(expr_binary_three.expr, expr_binary_four.expr)};

    expr_binary_two {-> expr} = {binary_three} expr_binary_three
                    {-> expr_binary_three.expr}
            | {logic_and} expr_binary_two dbl_ampr expr_binary_three
                    {-> New expr.logic_and(expr_binary_two.expr, expr_binary_three.expr)};

    expr_binary_one {-> expr} = {binary_two} expr_binary_two
                    {-> expr_binary_two.expr}
            | {logic_or} expr_binary_one dbl_pipe expr_binary_two
                    {-> New expr.logic_or(expr_binary_one.expr, expr_binary_two.expr)};

    // TYPES
    type {-> type} = {enclosed} lf_paren type rht_paren
                    {-> type.type}
            | {name} type_name
                    {-> type_name.type}
            | {slice} type_slice
                    {-> type_slice.type}
            | {array} type_array
                    {-> type_array.type}
            | {struct} type_struct
                    {-> type_struct.type};

    type_name {-> type} = idenf
                    {-> New type.name(idenf)};

    type_slice {-> type} = lf_sq_paren rht_sq_paren type
                    {-> New type.slice(type.type)};

    type_array {-> type} = lf_sq_paren expr_int rht_sq_paren type
                    {-> New type.array(type.type, expr_int.expr)};

    struct_field {-> struct_field} = idenf_list type semi
                    {-> New struct_field(type.type, [idenf_list.idenf])};

    type_struct {-> type} = kw_struct lf_brace struct_field* rht_brace
                    {-> New type.struct([struct_field.struct_field])};

Abstract Syntax Tree

    // PROGRAM
    prog = pkg decl*;

    pkg = idenf;

    // DECLARATIONS
    decl = {var} type? idenf* expr*
            | {type} type idenf
            | {func} type? idenf param* stmt*;

    param = type idenf*;

    // STATEMENTS
    stmt = {empty}
            | {print} expr*
            | {println} expr*
            | {return} expr?
            | {break}
            | {continue}
            | {if} if_block+ [else]:stmt*
            | {switch} [init]:stmt? [value]:expr? case*
            | {for} for_condition stmt*
            | {decl} decl*
            | {expr} expr
            | {incr} expr
            | {decr} expr
            | {decl_var_short} [left]:expr* [right]:expr*
            | {assign} [left]:expr* [right]:expr*
            | {assign_mul} [left]:expr [right]:expr
            | {assign_div} [left]:expr [right]:expr
            | {assign_rem} [left]:expr [right]:expr
            | {assign_lshift} [left]:expr [right]:expr
            | {assign_rshift} [left]:expr [right]:expr
            | {assign_bit_and} [left]:expr [right]:expr
            | {assign_bit_and_not} [left]:expr [right]:expr
            | {assign_add} [left]:expr [right]:expr
            | {assign_sub} [left]:expr [right]:expr
            | {assign_bit_or} [left]:expr [right]:expr
            | {assign_bit_xor} [left]:expr [right]:expr;

    if_block = [init]:stmt? [cond]:expr [block]:stmt*;

    case = {default} stmt*
            | {expr} expr* stmt*;

    for_condition = {empty}
            | {expr} expr
            | {clause} [init]:stmt [cond]:expr? [post]:stmt;

    // EXPRESSIONS
    expr = {ident} idenf
            | {int_dec} int_lit
            | {int_oct} oct_lit
            | {int_hex} hex_lit
            | {float} float_lit
            | {rune} rune_lit
            | {string_intr} interpreted_string_lit
            | {string_raw} raw_string_lit
            | {select} [value]:expr idenf
            | {index} [value]:expr [index]:expr
            | {call} [value]:expr [args]:expr*
            | {cast} [type]:type [value]:expr
            | {append} [left]:expr [right]:expr
            | {logic_not} [inner]:expr
            | {reaffirm} [inner]:expr
            | {negate} [inner]:expr
            | {bit_not} [inner]:expr
            | {mul} [left]:expr [right]:expr
            | {div} [left]:expr [right]:expr
            | {rem} [left]:expr [right]:expr
            | {lshift} [left]:expr [right]:expr
            | {rshift} [left]:expr [right]:expr
            | {bit_and} [left]:expr [right]:expr
            | {bit_and_not} [left]:expr [right]:expr
            | {add} [left]:expr [right]:expr
            | {sub} [left]:expr [right]:expr
            | {bit_or} [left]:expr [right]:expr
            | {bit_xor} [left]:expr [right]:expr
            | {eq} [left]:expr [right]:expr
            | {neq} [left]:expr [right]:expr
            | {less} [left]:expr [right]:expr
            | {less_eq} [left]:expr [right]:expr
            | {great} [left]:expr [right]:expr
            | {great_eq} [left]:expr [right]:expr
            | {logic_and} [left]:expr [right]:expr
            | {logic_or} [left]:expr [right]:expr;

    // TYPES
    type = {name} idenf
            | {slice} type
            | {array} type expr
            | {struct} [fields]:struct_field*;

    struct_field = type [names]:idenf*;
