Package golite ;

/*
TODO: fix these lexer bugs

1. Any source line must end with a space. This is wrong
2. ("1") doesn't parse, it should
3. append + 1 doesn't parse, it should since append is not a keyword
4. rune + 1 doesn't parse, it should since basic type names are not keywords
*/

Helpers

    //CHARACTERS

    //Some Symbols
    underscore = '_';
    slash = '/';
    backslash = '\';
    star = '*';
    dot = '.';


    //Universal Character Set
    ch_set = [0 .. 0xFFFF];

    tab = 9;
    newln = 10 ;
    carriage = 13;

    endln = carriage newln | carriage | newln;
    not_endln = [ch_set - [carriage + newln]];

    // Alphabets
    alpha = ['A' .. 'Z'] | ['a' .. 'z'];

    //Numeric Characters

    zero = '0';
    num_ch = ['0' .. '9'] ;
    oct_num_ch = ['0' .. '7'];

    nozero = [num_ch - '0'];
    hex_num_ch = num_ch | alpha;

    sp = ' ';
    single_quot = ''';
    double_quot = '"';
    back_q = '`';

    // Escape Sequence
    escapes = '\' ('\'| 'a' | 'b' | 'f' | 'n' | 'r' | 't' | 'v' );
    escape_squote = '\' ''';
    escape_dquote = '\"';

    no_carr_nl = [ch_set - [carriage + newln]] ;
    no_carr_nl_sl = [no_carr_nl - backslash];

    alpha_hyphen = alpha | underscore;
    alpha_numch = alpha_hyphen | num_ch ;



Tokens

    star = star;
    slash = slash;

    //Blanks & WhiteSpace
    endln = carriage newln | carriage | newln;
    wht_sp = (sp | endln | tab) +;

    kw_break = 'break';
    kw_case = 'case';
    kw_chan = 'chan';
    kw_const = 'const';
    kw_continue = 'continue';
    kw_default = 'default';
    kw_defer = 'defer';
    kw_else = 'else';
    kw_fallthrough = 'fallthrough';
    kw_for = 'for';
    kw_func = 'func';
    kw_go = 'go';
    kw_goto = 'goto';
    kw_if = 'if';
    kw_import = 'import';
    kw_interface = 'interface';
    kw_map = 'map';
    kw_package = 'package';
    kw_range = 'range';
    kw_return = 'return';
    kw_select = 'select';
    kw_struct = 'struct';
    kw_switch = 'switch';
    kw_type = 'type';
    kw_var = 'var';

    print = 'print';
    println = 'println';
    append = 'append';

    // Data Types
    int = 'int';
    float64 = 'float64';
    bool = 'bool';
    rune = 'rune';
    string = 'string';

    //Operators

    plus = '+';
    minus = '-';


    mod = '%';
    ampr = '&';
    pipe = '|';
    crt = '^';
    lshift = '<<';
    rshift = '>>';
    ampr_crt = '&^';
    plus_eql = '+=';
    minus_eql = '-=';
    star_eql = '*=';
    slash_eql = '/=';
    mod_eql = '%=';
    ampr_eql = '&=';
    pipe_eql = '|=';
    crt_eql = '^=';
    lshift_eql = '<<=';
    rshift_eql = '>>=';
    ampr_crt_eql = '&^=';
    dbl_ampr = '&&';
    dbl_pipe = '||';
    inp = '<-';
    dbl_plus = '++';
    dbl_minus = '--';
    dbl_eql = '==';
    less_than = '<';
    greatr_than = '>';
    eql = '=';
    not = '!';
    not_eql = '!=';
    less_than_eql = '<=';
    greatr_than_eql = '>=';
    col_eql = ':=';
    ellipsis = '...';

    lf_paren = '(';
    lf_sq_paren = '[';
    lf_brace = '{';
    comma = ',';
    dot = dot;

    rht_paren = ')';
    rht_sq_paren = ']';
    rht_brace = '}';

    semi = ';';
    coln = ':';

    underscore = underscore;

    //COMMENTS

    comment = '//' not_endln * | '/*' ([ch_set - star] | star [ch_set - slash])* '*/';

    // IDENTIFIER
    //idenf = alpha alpha_num* | underscore alpha_num+ ;

    idenf = alpha alpha_numch* | underscore alpha_numch+;

    // DataTypes

    // Int
    int_dtype = zero | num_ch num_ch*;
    oct_dtype = zero oct_num_ch+;
    hex_dtype = zero ['x' + 'X'] hex_num_ch+;

    // Float
    float_dtype = num_ch* dot num_ch* | dot num_ch+;

    /* String literals */

    // "hello\n" // Interpreted string, \n is transformed into newline
    interpreted_string_dtype = double_quot ([no_carr_nl_sl - single_quot] | escape_dquote| escapes)* double_quot;

    // `hello\n` // Raw string, \n appears as a `\` followed by `n`
    raw_string_dtype = back_q [ch_set - back_q]* back_q;

    rune_dtype = single_quot ([no_carr_nl_sl - single_quot] | escape_squote| escapes) single_quot;


Ignored Tokens
    comment,
    wht_sp;

Productions

    // JUST FOR TESTING
    start {-> expr} = expr {-> expr.expr};

    // Program
    prog = pack_decl decl*;

    // Declarations
    decl = {var_decl} var_decl | {type_decl} type_decl | {func_decl} func_decl;

    // only type and variable declarations are statements
    decl_stmt = {var} var_decl
            | {type} type_decl;

    // Package declaration
    pack_decl = kw_package idenf semi;

    // Variable declarations
    var_decl = {single} kw_var spec_var semi
            | {distributed} kw_var lf_paren spec_var_stmt* rht_paren semi
            | {short} idenf_opt_list col_eql exprs_list;

    spec_var_stmt = spec_var semi;

    spec_var = {type} idenf_opt_list type
            | {expr} idenf_opt_list eql exprs_list
            | {typeandexpr} idenf_opt_list type eql exprs_list;

    // Type declarations
    type_decl = {single} kw_type type_spec semi
            | {distributed} kw_type lf_paren type_spec_stmt* rht_paren semi;

    type_spec_stmt = type_spec semi;

    type_spec = idenf_opt type;

    // Function declarations
    func_decl = {return} kw_func idenf lf_paren param_list rht_paren type_basic block semi
            | {no_return} kw_func idenf lf_paren param_list rht_paren block semi;

    block = lf_brace stmt* rht_brace;

    idenf_opt_list = {singleopt} idenf_opt
            | {multipleopt} idenf_opt comma idenf_opt_list;

    idenf_opt = {empty} underscore | {idenf} idenf;

    param_list = {empty} | {param_list} param_start* param_type_spec;
    param_start = param_type_spec comma;
    param_type_spec = idenf_list type_spec;

    // For testing until real statements are done
    //stmt = {empty} raw_string_dtype semi | interpreted_string_dtype  semi;

    //Assign - restrict lvalue to identifier(s), array(s), etc.
    stmt = {empty}
            | {decl} decl_stmt
            | {incr} expr dbl_plus
            | {decr} expr dbl_minus
            | {print} print lf_paren exprs_list rht_paren
            | {println} println lf_paren exprs_list rht_paren
            | {return} kw_return
            | {return_exp} kw_return expr;


    // EXPRESSIONS
    expr {-> expr} = expr_binary_one {-> expr_binary_one.expr};

    expr_int {-> expr} = {int_dec} int_dtype
                    {-> New expr.int_dec(int_dtype)}
            | {int_octal} oct_dtype
                    {-> New expr.int_oct(oct_dtype)}
            | {int_hex} hex_dtype
                    {-> New expr.int_hex(hex_dtype)};

    expr_string {-> expr} = {string_intr} interpreted_string_dtype
                    {-> New expr.string_intr(interpreted_string_dtype)}
            | {string_raw} raw_string_dtype
                    {-> New expr.string_raw(raw_string_dtype)};

    expr_atom {-> expr} = {ident} idenf
                    {-> New expr.ident(idenf)}
            | {int} expr_int
                    {-> expr_int.expr}
            | {float} float_dtype
                    {-> New expr.float(float_dtype)}
            | {rune} rune_dtype
                    {-> New expr.rune(rune_dtype)}
            | {string} expr_string
                    {-> expr_string.expr}
            | {paren} lf_paren expr rht_paren
                    {-> expr.expr};

    // Arguments are comma separated
    exprs_list {-> expr*} = {single} expr
                    {-> [expr.expr]}
            | {multiple} expr comma exprs_list
                    {-> [expr.expr, exprs_list.expr]};
    // An argument list is between () and can be empty
    args_list {-> expr*} = lf_paren exprs_list? rht_paren
                    {-> [exprs_list.expr]};

    expr_primary {-> expr} = {atom} expr_atom
                    {-> expr_atom.expr}
            | {select} expr_primary dot idenf
                    {-> New expr.select(expr_primary.expr, idenf)}
            | {index} expr_primary lf_sq_paren expr rht_sq_paren
                    {-> New expr.index(expr_primary.expr, expr.expr)}
            | {call} expr_primary args_list
                    {-> New expr.call(expr_primary.expr, [args_list.expr])}
            | {cast} type_basic lf_paren expr rht_paren
                    {-> New expr.cast(type_basic.type, expr.expr)}
            | {append} append lf_paren [arg1]:expr comma [arg2]:expr rht_paren
                    {-> New expr.append(arg1.expr, arg2.expr)};

    expr_unary {-> expr} = {primary} expr_primary
                    {-> expr_primary.expr}
            | {logic_not} not expr_unary
                    {-> New expr.logic_not(expr_unary.expr)}
            | {reaffirm} plus expr_unary
                    {-> New expr.reaffirm(expr_unary.expr)}
            | {negate} minus expr_unary
                    {-> New expr.negate(expr_unary.expr)}
            | {bit_not} crt expr_unary
                    {-> New expr.bit_not(expr_unary.expr)};

    expr_binary_five {-> expr} = {unary} expr_unary
                    {-> expr_unary.expr}
            | {mul} expr_binary_five star expr_unary
                    {-> New expr.mul(expr_binary_five.expr, expr_unary.expr)}
            | {div} expr_binary_five slash expr_unary
                    {-> New expr.div(expr_binary_five.expr, expr_unary.expr)}
            | {rem} expr_binary_five mod expr_unary
                    {-> New expr.rem(expr_binary_five.expr, expr_unary.expr)}
            | {lshift} expr_binary_five lshift expr_unary
                    {-> New expr.lshift(expr_binary_five.expr, expr_unary.expr)}
            | {rshift} expr_binary_five rshift expr_unary
                    {-> New expr.rshift(expr_binary_five.expr, expr_unary.expr)}
            | {bit_and} expr_binary_five ampr expr_unary
                    {-> New expr.bit_and(expr_binary_five.expr, expr_unary.expr)}
            | {bit_and_not} expr_binary_five ampr_crt expr_unary
                    {-> New expr.bit_and_not(expr_binary_five.expr, expr_unary.expr)};

    expr_binary_four {-> expr} = {binary_five} expr_binary_five
                    {-> expr_binary_five.expr}
            | {add} expr_binary_four plus expr_binary_five
                    {-> New expr.add(expr_binary_four.expr, expr_binary_five.expr)}
            | {sub} expr_binary_four minus expr_binary_five
                    {-> New expr.sub(expr_binary_four.expr, expr_binary_five.expr)}
            | {bit_or} expr_binary_four pipe expr_binary_five
                    {-> New expr.bit_or(expr_binary_four.expr, expr_binary_five.expr)}
            | {bit_xor} expr_binary_four crt expr_binary_five
                    {-> New expr.bit_xor(expr_binary_four.expr, expr_binary_five.expr)};

    expr_binary_three {-> expr} = {binary_four} expr_binary_four
                    {-> expr_binary_four.expr}
            | {eq} expr_binary_three dbl_eql expr_binary_four
                    {-> New expr.eq(expr_binary_three.expr, expr_binary_four.expr)}
            | {neq} expr_binary_three not_eql expr_binary_four
                    {-> New expr.neq(expr_binary_three.expr, expr_binary_four.expr)}
            | {less} expr_binary_three less_than expr_binary_four
                    {-> New expr.less(expr_binary_three.expr, expr_binary_four.expr)}
            | {less_eq} expr_binary_three less_than_eql expr_binary_four
                    {-> New expr.less_eq(expr_binary_three.expr, expr_binary_four.expr)}
            | {great} expr_binary_three greatr_than expr_binary_four
                    {-> New expr.great(expr_binary_three.expr, expr_binary_four.expr)}
            | {great_eq} expr_binary_three greatr_than_eql expr_binary_four
                    {-> New expr.great_eq(expr_binary_three.expr, expr_binary_four.expr)};

    expr_binary_two {-> expr} = {binary_three} expr_binary_three
                    {-> expr_binary_three.expr}
            | {logic_and} expr_binary_two dbl_ampr expr_binary_three
                    {-> New expr.logic_and(expr_binary_two.expr, expr_binary_three.expr)};

    expr_binary_one {-> expr} = {binary_two} expr_binary_two
                    {-> expr_binary_two.expr}
            | {logic_or} expr_binary_one dbl_pipe expr_binary_two
                    {-> New expr.logic_or(expr_binary_one.expr, expr_binary_two.expr)};

    // TYPES
    type {-> type} = {basic} type_basic
                    {-> type_basic.type}
            | {slice} type_slice
                    {-> type_slice.type}
            | {array} type_array
                    {-> type_array.type}
            | {struct} type_struct
                    {-> type_struct.type};

    type_basic {-> type} = {int} int
                    {-> New type.int(int)}
            | {float64} float64
                    {-> New type.float64(float64)}
            | {bool} bool
                    {-> New type.bool(bool)}
            | {rune} rune
                    {-> New type.rune(rune)}
            | {string} string
                    {-> New type.string(string)};

    type_slice {-> type} = lf_sq_paren rht_sq_paren type
                    {-> New type.slice(type.type)};

    type_array {-> type} = lf_sq_paren expr_int rht_sq_paren type
                    {-> New type.array(type.type, expr_int.expr)};

    idenf_list {-> idenf*} = {single} idenf
                    {-> [idenf]}
            | {multiple} idenf comma idenf_list
                    {-> [idenf, idenf_list.idenf]};

    struct_field {-> struct_field} = idenf_list type semi
                    {-> New struct_field(type.type, [idenf_list.idenf])};

    type_struct {-> type} = kw_struct lf_brace struct_field* rht_brace
                    {-> New type.struct([struct_field.struct_field])};

Abstract Syntax Tree

    // EXPRESSIONS
    expr = {ident} idenf
            | {int_dec} int_dtype
            | {int_oct} oct_dtype
            | {int_hex} hex_dtype
            | {float} float_dtype
            | {rune} rune_dtype
            | {string_intr} interpreted_string_dtype
            | {string_raw} raw_string_dtype
            | {select} [value]:expr idenf
            | {index} [value]:expr [index]:expr
            | {call} [value]:expr [args]:expr*
            | {cast} [type]:type [value]:expr
            | {append} [left]:expr [right]:expr
            | {logic_not} [inner]:expr
            | {reaffirm} [inner]:expr
            | {negate} [inner]:expr
            | {bit_not} [inner]:expr
            | {mul} [left]:expr [right]:expr
            | {div} [left]:expr [right]:expr
            | {rem} [left]:expr [right]:expr
            | {lshift} [left]:expr [right]:expr
            | {rshift} [left]:expr [right]:expr
            | {bit_and} [left]:expr [right]:expr
            | {bit_and_not} [left]:expr [right]:expr
            | {add} [left]:expr [right]:expr
            | {sub} [left]:expr [right]:expr
            | {bit_or} [left]:expr [right]:expr
            | {bit_xor} [left]:expr [right]:expr
            | {eq} [left]:expr [right]:expr
            | {neq} [left]:expr [right]:expr
            | {less} [left]:expr [right]:expr
            | {less_eq} [left]:expr [right]:expr
            | {great} [left]:expr [right]:expr
            | {great_eq} [left]:expr [right]:expr
            | {logic_and} [left]:expr [right]:expr
            | {logic_or} [left]:expr [right]:expr;

    // TYPES
    type = {int} int
            | {float64} float64
            | {bool} bool
            | {rune} rune
            | {string} string
            | {slice} type
            | {array} type expr
            | {struct} [fields]:struct_field*;

    struct_field = type [names]:idenf*;
