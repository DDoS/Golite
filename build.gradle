// Default tasks
defaultTasks 'build'

// Apply plugins
apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'sablecc-gradle-plugin'

// Basic project information
group = 'ca.sapon'
archivesBaseName = 'golite'
version = '0.0.1-SNAPSHOT'
mainClassName = "golite.App"

// Extended project information
ext.projectName = 'GoLite'
ext.inceptionYear = '2017'
ext.currentYear = '2017'
ext.packaging = 'jar'
ext.url = 'https://github.com/Sable/comp520-2017-09'
ext.description = 'GoLite project for COMP 520'
ext.author = 'Aleksi Sapon, Rohit Verma, Ayesha Krishnamurthy'

// Minimum version of Java required
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

// Define variables
ext.buildNumber = project.hasProperty("buildNumber") ? buildNumber : '0'
ext.ciSystem = project.hasProperty("ciSystem") ? ciSystem : 'unknown'
ext.commit = project.hasProperty("commit") ? commit : 'unknown'

// Plugin repositories and dependencies
buildscript {
    repositories {
        mavenCentral()
        flatDir dirs: 'gradle/plugins'
    }
    dependencies {
        classpath 'ca.sapon:sablecc-gradle-plugin:0.0.1-SNAPSHOT'
    }
}

// Non-plugin repositories and dependencies
repositories {
    mavenCentral()
}

dependencies {
    compile 'commons-cli:commons-cli:1.3.1'
    compile 'org.bytedeco.javacpp-presets:llvm-platform:3.9.0-1.3'
    testCompile 'junit:junit:4.8.2'
}

// Source compiler configuration
configure([compileJava, compileTestJava]) {
    options.compilerArgs << '-Xlint:all'
    options.compilerArgs << '-Xlint:-path'
    options.deprecation = true
}

// JAR manifest configuration
jar {
    manifest {
        attributes "Main-Class": mainClassName,
                "Built-By": System.properties['user.name'],
                "Created-By": System.properties['java.vm.version'] + " (" + System.properties['java.vm.vendor'] + ")",
                "Implementation-Title": name,
                "Implementation-Version": version + "+" + ciSystem + "-b" + buildNumber + ".git-" + commit,
                "Implementation-Vendor": url
    }
}

distZip.enabled = false
distTar.enabled = false
startScripts.enabled = false

run {
    standardInput = System.in
    if (project.hasProperty("appArgs")) {
        args appArgs.split()
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.3'
}

test {
    testLogging {
        exceptionFormat = 'full'
        events 'standard_error'
    }
    // this will ensure that tests are rerun if the program files change
    inputs.dir 'programs'
}

task compileRuntime {
    def runtimeSource = 'src/main/c/golite_runtime.c'
    def outputDir = "$buildDir/objs/"
    def outputObj = outputDir + 'golite_runtime.o'

    inputs.files runtimeSource
    outputs.file outputObj

    doFirst {
        def outputDirFile = new File(outputDir)
        if (!outputDirFile.exists()) {
            outputDirFile.mkdirs()
        }
    }

    doLast {
        exec {
            commandLine 'gcc', '-c', runtimeSource, '-o', outputObj
        }
    }
}

task createRunScript {
    def outputDir = "$projectDir/"
    def outputScript = outputDir + 'run.sh'

    outputs.file outputScript

    doLast {
        def script = new File(outputScript);
        script.setText '#!/usr/bin/env bash\n\n'
        script << 'if [[ $1 == "-v" ]]; then\n' +
                '    echo "Team 9 Golite compiler"\n' +
                '    echo "v1.0.0-rc"\n' +
                '    exit 0\n' +
                'fi\n\n'
        script << 'java -classpath "'
        script << sourceSets.main.runtimeClasspath.asPath
        script << '" '
        script << mainClassName
        script << ' $*\n'
        script.setExecutable(true)
    }
}

build {
    dependsOn compileRuntime
    dependsOn createRunScript
}

run {
    dependsOn compileRuntime
}
